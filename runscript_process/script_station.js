/**
 * This file is the main definition of background process.
 * It creates pythonshells, communicate with the local python
 * script, receive result that is generated by the python
 * script, then send back the result to the main process so
 * that main process can send back to the React UI process
 */

const { PythonShell } = require('python-shell');
const { ipcRenderer } = require('electron');
const path = require('path');

// Global variable for storing python shell instance
let pyshell = null

// This only calls once as the background process is being created
if(pyshell == null){
    ipcRenderer.send('BACKGROUND_READY');
}

/**
 * Initialize the python shell using arguments sent from UI process
 * @param {Object} data This contains data that will be sent
 * to the python scirpt. These are the options that can be set by
 * the sender.
 */
function initShell(data){
    const { args } = data;
    pyshell = new PythonShell(path.join(__dirname, '/../python_script/factorial.py'), {
        pythonPath: 'python',
        args: args,
        mode:'text',

    });
    
}

/**
 * Handler for receiving data from the UI process via the main process.
 * It will pass arguments to the initShell(args) function to initialize
 * python shell, then after python shell return result, it will send back
 * the result to the main process so that it could be forward to React UI
 * process.
 * @param {IpcMainEvent} event 
 * @param {Object} data The data of python script
 */
function processScript(event, data){
    initShell(data)
    pyshell.send(data.code);
    console.log(data)
    pyshell.on('message', function(results) {
        console.log(results)
        ipcRenderer.send('RETURN-FROM-BACKGROUND', { message: results });
    });
    // end the input stream and allow the process to exit
    pyshell.end(function (err,code,signal) {
        if (err) throw err;
        console.log('The exit code was: ' + code);
        console.log('The exit signal was: ' + signal);
        console.log('finished');
    });
}

// Listener for starting process data
ipcRenderer.on('START_PROCESSING', processScript);
